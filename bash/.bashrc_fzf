#   __                            __ _           _           
#  / _|_   _ _________   _       / _(_)_ __   __| | ___ _ __ 
# | |_| | | |_  /_  / | | |_____| |_| | '_ \ / _` |/ _ \ '__|
# |  _| |_| |/ / / /| |_| |_____|  _| | | | | (_| |  __/ |   
# |_|  \__,_/___/___|\__, |     |_| |_|_| |_|\__,_|\___|_|   
#                    |___/                                   
#
#-------- Fuzzy Finder {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/playlist?list=PLqv94xWU9zZ2fMsMMDF4PjtNHCeBFbggD
# DESC: interactive fuzzy string matching
# LINK: https://github.com/junegunn/fzf

# SUMMARY
#	- open files
#		- fe - in vim via file name
#		- fg - in vim  via file content
#	- change directory
#		- fd - to selected dir
#		- fd. - to hidden selected dir
#		- fdp - to parent dir
#		- fdc - to any dir via locate
# - surfraw bookmarks
# 	- fbcli - fzf-bookmarkscli - open bookmark in terminal browser
# 	- fb - fzf-bookmarks - open bookmark in gui browser
# 	- fbcb - fzf-bookmarks2clipboard - copy bookmark to clipboard
#	- command history
#		- fh - run command from history
#		- fhe - edit and run command from history
#	- kill process
#		- fkill - kill a process
#	- git
#	- tmux
#		- tm - (re)open tmux session
#	- chrome
#		- fzf-chrome-history - search history
# - obsolete / not used scripts

export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'

#-------- fuzzy opening files in vim {{{
##-------------------------------------------------------------------------
#-------- search file and open in vim {{{
##-------------------------------------------------------------------------
# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Search starting from current working dir
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}
##----
#-}}}---------------------------------------------------------------------
#-------- grep via ag and open in vim {{{
##-------------------------------------------------------------------------
# fgr - fuzzy grep via ag and open with vim
fgr() {
  local file

  file="$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1 " +" $2}')"

  if [[ -n $file ]]
  then
     vim $file
  fi
}
##----
#-}}}---------------------------------------------------------------------
##----
#-}}}---------------------------------------------------------------------

#-------- fuzzy change directories {{{
##-------------------------------------------------------------------------
#-------- cd to selected directory {{{
##-------------------------------------------------------------------------
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}
##----
#-}}}---------------------------------------------------------------------
#-------- cd to selected (hidden) directory {{{
##-------------------------------------------------------------------------
fd.() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}
##----
#-}}}---------------------------------------------------------------------
#-------- cd to selected parent directory {{{
##-------------------------------------------------------------------------
fdp() {
  local declare dirs=()
  get_parent_dirs() {
    if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
    if [[ "${1}" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo $_dir; done
    else
      get_parent_dirs $(dirname "$1")
    fi
  }
  local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
  cd "$DIR"
}
##----
#-}}}---------------------------------------------------------------------
#-------- cd from anywhere via locate {{{
# ex: cf word1 word2 ... (even part of a file name)
# zsh autoload function
##-------------------------------------------------------------------------
fdc() {
  local file

  file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"

  if [[ -n $file ]]
  then
     if [[ -d $file ]]
     then
        cd -- $file
     else
        cd -- ${file:h}
     fi
  fi
}
##----
#-}}}---------------------------------------------------------------------
##----
#-}}}---------------------------------------------------------------------

#-------- fuzzy bookmarking using surfraw bookmarks {{{
##-------------------------------------------------------------------------
fbcli() { sr "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fb() { surfraw "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fbcb() { echo -n "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" | awk '{print $2}' | xclip -selection clipboard ;}
##----
#-}}}---------------------------------------------------------------------

#-------- fuzzy command history {{{
##-------------------------------------------------------------------------
#-------- run command {{{
# fh - repeat history
##-------------------------------------------------------------------------
runcmd (){ perl -e 'ioctl STDOUT, 0x5412, $_ for split //, <>' ; }

fh() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | runcmd
}

##----
#-}}}---------------------------------------------------------------------
#-------- edit and run command {{{
##-------------------------------------------------------------------------
# fhe - repeat history edit
writecmd (){ perl -e 'ioctl STDOUT, 0x5412, $_ for split //, do{ chomp($_ = <>); $_ }' ; }

fhe() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | writecmd
}
##----
#-}}}---------------------------------------------------------------------
##----
#-}}}---------------------------------------------------------------------

#-------- fuzzy kill processes {{{
# fkill - kill processes - list only the ones you can kill.
##-------------------------------------------------------------------------
fkill() {
    local pid 
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi  

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi  
}
##----
#-}}}---------------------------------------------------------------------

#-------- fuzzy git {{{
##-------------------------------------------------------------------------
# see https://github.com/junegunn/fzf/wiki/examples#git[201~
##----
#-}}}---------------------------------------------------------------------

#-------- fuzzy tmux {{{
##-------------------------------------------------------------------------
# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.
tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}
##----
#-}}}---------------------------------------------------------------------

#-------- fuzzy chrome history {{{
# https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/
# https://github.com/junegunn/fzf/wiki/examples#browsing-history
##-------------------------------------------------------------------------
fzf-chrome_history() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  # linux
  \cp -f ~/.config/google-chrome/Default/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs xdg-open
  # fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}
##----
#-}}}---------------------------------------------------------------------

#-------- obsolete / not used fuzzy scripts {{{
##-------------------------------------------------------------------------
# TODO rofi not installed yet
#rofi-fzf() { $(declare -f | awk '/fzf-/ {print $1}' | grep -i fzf | fzf -e -i) ;}

# TODO greenclip not installed yet
#fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i | awk '{$1=$1};1')" | xclip -selection clipboard ;}
#fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i)" | xclip -selection clipboard ;}

# TODO torify not installed yet
fzf-tor() { torify w3m "$(cat ~/.config/surfraw/bookmarks | awk 'NF != 0 && !/^#/ && /\.onion/' |fzf -e -i | awk '{print $2}')" ;}

# not used but kept as example on how to write a fzf script
#fzf-launcher() {
#  # note: xdg-open has a bug with .desktop files, so we cant use that shit
#  selected="$(ls /usr/share/applications | fzf -e -i )"
#  nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
#  # disown if exit 0 successfully
#  if [[ $? = 0 ]] ; then disown; fi
#}

# http://www.reddit.com/r/commandline/comments/3abtup/fzfr_fzf_bash_function/
# TODO unclear what this does
#fzfr() { fzf -m -x | xargs -d'\n' -r "$@" ; }

# TODO only works with zsh
# fv - fuzzy open with vim from anywhere
# ex: vf word1 word2 ... (even part of a file name)
# zsh autoload function
#fv() {
#  local files
#
#  files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})
#
#  if [[ -n $files ]]
#  then
#     vim -- $files
#     print -l $files[1]
#  fi
#}
# not used but kept as example on how to write a fzf script
# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
#fo() {
#  local out file key
#  IFS=$'\n' out=($(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e))
#  key=$(head -1 <<< "$out")
#  file=$(head -2 <<< "$out" | tail -1)
#  if [ -n "$file" ]; then
#    [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
#  fi
#}
##----
#-}}}---------------------------------------------------------------------
#}}}
